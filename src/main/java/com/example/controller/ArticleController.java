package com.example.controller;import com.example.dto.JwtDTO;import com.example.dto.ArticleDTO;import com.example.entity.ProfileEntity;import com.example.service.ArticleService;import com.example.util.SecurityUtil;import jakarta.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping("")public class ArticleController {    @Autowired    ArticleService articleService;    @PostMapping("/moderator/create")    public ResponseEntity<ArticleDTO> create(@RequestBody ArticleDTO articleDTO,                                             HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil                .hasRole(request, ProfileEntity.Role.MODERATOR);        ArticleDTO createdProfile = articleService.create(articleDTO, jwtDTO.getId());        return ResponseEntity                .status(HttpStatus.CREATED)                .body(createdProfile);    }    @PutMapping("/admin/update/{id}")    public ResponseEntity<ArticleDTO> update(@PathVariable Long id,                                             @RequestBody ArticleDTO articleDTO,                                             HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ADMIN);        ArticleDTO updatedProfile = articleService.update(id, articleDTO);        return ResponseEntity.ok(updatedProfile);    }    @PutMapping("/admin/update/{profileId}")    public ResponseEntity<ArticleDTO> updateDetail(@RequestBody ArticleDTO articleDTO,                                                   @PathVariable Long profileId,                                                   HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ADMIN);        ArticleDTO updatedProfile = articleService.updateDetail(profileId, articleDTO);        return ResponseEntity.ok(updatedProfile);    }    @DeleteMapping("/admin/delete/{id}")    public ResponseEntity<String> delete(@PathVariable Long id,                                         HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ADMIN);        String response = articleService.delete(jwtDTO.getId(), id);        return ResponseEntity.ok(response);    }    @GetMapping("/admin/all")    public ResponseEntity<Page<ArticleDTO>> getAll(@RequestParam(defaultValue = "0") Integer page,                                                   @RequestParam(defaultValue = "5") Integer size,                                                   HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ADMIN);        Page<ArticleDTO> articleDTOPage = articleService.getAll(page, size);        return ResponseEntity.ok(articleDTOPage);    }    @GetMapping("/{id}")    public ResponseEntity<?> getById(@PathVariable Long id) {        ArticleDTO articleDTO = articleService.getById(id);        return ResponseEntity.ok(articleDTO);    }}