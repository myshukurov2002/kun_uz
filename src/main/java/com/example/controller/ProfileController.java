package com.example.controller;import com.example.dto.JwtDTO;import com.example.dto.ProfileDTO;import com.example.entity.ProfileEntity;import com.example.service.ProfileService;import com.example.util.SecurityUtil;import jakarta.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping("/api/v1/profile")public class ProfileController {    @Autowired    ProfileService profileService;    @PostMapping("/admin/create")    public ResponseEntity<ProfileDTO> create(@RequestBody ProfileDTO profileDTO,                                             HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil                .hasRole(request, ProfileEntity.Role.ROLE_ADMIN);        ProfileDTO createdProfile = profileService.create(profileDTO, jwtDTO.getId());        return ResponseEntity                .status(HttpStatus.CREATED)                .body(createdProfile);    }    @PutMapping("/admin/update/by-id/{id}")    public ResponseEntity<ProfileDTO> update(@PathVariable Long id,                                             @RequestBody ProfileDTO profileDTO,                                             HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ROLE_ADMIN);        ProfileDTO updatedProfile = profileService.update(id, profileDTO);        return ResponseEntity.ok(updatedProfile);    }    @PutMapping("/admin/update/by-profile_id/{profileId}")    public ResponseEntity<ProfileDTO> updateDetail(@RequestBody ProfileDTO profileDTO,                                                   @PathVariable Long profileId,                                                   HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ROLE_ADMIN);        ProfileDTO updatedProfile = profileService.updateDetail(profileId, profileDTO);        return ResponseEntity.ok(updatedProfile);    }    @DeleteMapping("/admin/delete/by-date/{id}")    public ResponseEntity<String> delete(@PathVariable Long id,                                         HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ROLE_ADMIN);        String response = profileService.delete(jwtDTO.getId(), id);        return ResponseEntity.ok(response);    }    @GetMapping("/admin/all")    public ResponseEntity<Page<ProfileDTO>> getAll(@RequestParam(defaultValue = "0") Integer page,                                                   @RequestParam(defaultValue = "5") Integer size,                                                   HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ROLE_ADMIN);        Page<ProfileDTO> profileDTOPage = profileService.getAll(page, size);        return ResponseEntity.ok(profileDTOPage);    }    @GetMapping("/open/by-id/{id}")    public ResponseEntity<?> getById(@PathVariable Long id) {        ProfileDTO profileDTO = profileService.getById(id);        return ResponseEntity.ok(profileDTO);    }}