package com.example.controller;import com.example.dto.ApiResponse;import com.example.dto.CommentDTO;import com.example.dto.JwtDTO;import com.example.entity.ProfileEntity;import com.example.service.CommentService;import com.example.util.SecurityUtil;import jakarta.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.time.LocalDate;@RestController@RequestMapping("/api/v1/comment")public class CommentController {    @Autowired    CommentService commentService;    @PostMapping("/create")    public ResponseEntity<ApiResponse> create(@RequestBody CommentDTO commentDTO,                                              HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, null);        return ResponseEntity.ok(commentService.create(jwtDTO.getId(), commentDTO));    }    @PutMapping("/update/{id}")    public ResponseEntity<ApiResponse> update(@PathVariable String id,                                              @RequestBody CommentDTO commentDTO,                                              HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, null);        return ResponseEntity.ok(commentService.update(id, commentDTO));    }    @DeleteMapping("/delete/{id}")    public ResponseEntity<ApiResponse> delete(@PathVariable String id,                                              @RequestBody CommentDTO commentDTO,                                              HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, null);        return ResponseEntity.ok(commentService.delete(id, commentDTO));    }    @GetMapping("/get/by_article/{id}")    public ResponseEntity<Page<CommentDTO>> getCommentListByArticleId(@PathVariable String articleId,                                                                      @RequestParam(defaultValue = "0") Integer page,                                                                      @RequestParam(defaultValue = "5") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.getCommentListByArticleId(articleId, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @GetMapping("/get/{article_id}/{id}")    public ResponseEntity<Page<CommentDTO>> getCommentListById(@PathVariable String id,                                                               @PathVariable String articleId,                                                               @RequestParam(defaultValue = "0") Integer page,                                                               @RequestParam(defaultValue = "5") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.getCommentListById(articleId, id, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @GetMapping("/get/by_created_date/{date}/{articleId}")    public ResponseEntity<Page<CommentDTO>> getCommentListByCreatedDate(@PathVariable String articleId,                                                                        @PathVariable LocalDate localDate,                                                                        @RequestParam(defaultValue = "0") Integer page,                                                                        @RequestParam(defaultValue = "5") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.getCommentListByCreatedDate(articleId, localDate, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @GetMapping("/get/by_updated_date/{date}/{articleId}")    public ResponseEntity<Page<CommentDTO>> getCommentListByUpdatedDate(@PathVariable String articleId,                                                                        @PathVariable LocalDate localDate,                                                                        @RequestParam(defaultValue = "0") Integer page,                                                                        @RequestParam(defaultValue = "5") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.getCommentListByUpdatedDate(articleId, localDate, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @GetMapping("/get/by_profile_id/{profileId}/{article_id}")    public ResponseEntity<Page<CommentDTO>> getCommentListByProfileId(@PathVariable Long profileId,                                                                      @PathVariable String articleId,                                                                      @RequestParam(defaultValue = "0") Integer page,                                                                      @RequestParam(defaultValue = "5") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.getCommentListByProfileId(articleId, profileId, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @GetMapping("/get/by_profile_name/{name}/{article_id}")    public ResponseEntity<Page<CommentDTO>> getCommentListByProfileName(@PathVariable String name,                                                                        @PathVariable String articleId,                                                                        @RequestParam(defaultValue = "0") Integer page,                                                                        @RequestParam(defaultValue = "5") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.getCommentListByProfileName(articleId, name, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @GetMapping("/get/by_profile_surname/{surname}/{article_id}")    public ResponseEntity<Page<CommentDTO>> getCommentListByProfileSurname(@PathVariable String surname,                                                                           @PathVariable String articleId,                                                                           @RequestParam(defaultValue = "0") Integer page,                                                                           @RequestParam(defaultValue = "5") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.getCommentListByProfileSurname(articleId, surname, page, size);        return ResponseEntity.ok(commentDTOPage);    }    ///////////////////////////    /////////////////////////////    @GetMapping("/paging/{id}")    public ResponseEntity<Page<CommentDTO>> getCommentPageById(@PathVariable String id,                                                               @RequestParam(defaultValue = "0") Integer page,                                                               @RequestParam(defaultValue = "5") Integer size,                                                               HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ADMIN);        Page<CommentDTO> commentDTOPage = commentService.getCommentPageById(id, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @GetMapping("/paging/by_created_date/{date}/{articleId}")    public ResponseEntity<Page<CommentDTO>> getCommentPageByCreatedDate(@PathVariable LocalDate localDate,                                                                        @RequestParam(defaultValue = "0") Integer page,                                                                        @RequestParam(defaultValue = "5") Integer size,                                                                        HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ADMIN);        Page<CommentDTO> commentDTOPage = commentService.getCommentPageByCreatedDate(localDate, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @GetMapping("/paging/by_updated_date/{date}")    public ResponseEntity<Page<CommentDTO>> getCommentPageByUpdatedDate(@PathVariable LocalDate localDate,                                                                        @RequestParam(defaultValue = "0") Integer page,                                                                        @RequestParam(defaultValue = "5") Integer size,                                                                        HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ADMIN);        Page<CommentDTO> commentDTOPage = commentService.getCommentPageByUpdatedDate(localDate, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @GetMapping("/paging/by_profile_id/{profileId}")    public ResponseEntity<Page<CommentDTO>> getCommentPageByProfileId(@PathVariable Long profileId,                                                                      @RequestParam(defaultValue = "0") Integer page,                                                                      @RequestParam(defaultValue = "5") Integer size,                                                                      HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ADMIN);        Page<CommentDTO> commentDTOPage = commentService.getCommentPageByProfileId(profileId, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @GetMapping("/paging/by_profile_name/{name}")    public ResponseEntity<Page<CommentDTO>> getCommentPageByProfileName(@PathVariable String name,                                                                        @RequestParam(defaultValue = "0") Integer page,                                                                        @RequestParam(defaultValue = "5") Integer size,                                                                        HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ADMIN);        Page<CommentDTO> commentDTOPage = commentService.getCommentPageByProfileName(name, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @GetMapping("/paging/by_profile_surname/{surname}")    public ResponseEntity<Page<CommentDTO>> getCommentPageByProfileSurname(@PathVariable String surname,                                                                           @RequestParam(defaultValue = "0") Integer page,                                                                           @RequestParam(defaultValue = "5") Integer size,                                                                           HttpServletRequest request) {        JwtDTO jwtDTO = SecurityUtil.hasRole(request, ProfileEntity.Role.ADMIN);        Page<CommentDTO> commentDTOPage = commentService.getCommentPageByProfileSurname(surname, page, size);        return ResponseEntity.ok(commentDTOPage);    }}