package com.example.security;import jakarta.persistence.Column;import org.codehaus.jackson.map.ObjectMapper;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.provisioning.InMemoryUserDetailsManager;import org.springframework.security.web.SecurityFilterChain;import java.util.UUID;@EnableWebSecurity@Configurationpublic class SpringSecurityConfig {    @Bean    public AuthenticationProvider authenticationProvider() {        // authentication (login,password)        String password = UUID.randomUUID().toString();        System.out.println("User Password mazgi: " + password);        password = "123456";        UserDetails user = User.builder()                .username("user")                .password("{noop}123456")                .roles("USER")                .build();//        UserDetails admin = User.builder()//                .username("admin")//                .password("{bycript}$2a$12$47RqpCGeB4J5/PyZHyFK3evKXiQLbTFW0Jtbpt9YzRFUU6vNYDIAa")//                .roles("ADMIN")//                .build();        UserDetails admin = User.builder()                .username("admin")                .password("{noop}123456")                .roles("ADMIN")                .build();        final DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();        authenticationProvider.setUserDetailsService(new InMemoryUserDetailsManager(user, admin));        return authenticationProvider;    }    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        // authorization (ROLE)        http.authorizeHttpRequests()                .requestMatchers("/api/v1/auth/**").permitAll()                .requestMatchers("/api/v1/news/**").permitAll()                .requestMatchers("/api/v1/region/admin", "/api/v1/region/admin/**").hasRole("ADMIN")                .anyRequest()                .authenticated()                .and().httpBasic();//                .and().formLogin();        return http.build();    }    @Bean    public ObjectMapper objectMapper() {        return new ObjectMapper();    }}