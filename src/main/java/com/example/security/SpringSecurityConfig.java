package com.example.security;import com.example.util.MD5Util;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;@EnableWebSecurity@Configurationpublic class SpringSecurityConfig {    @Autowired    private UserDetailsService userDetailsService;    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        // authorization (ROLE)        http.authorizeHttpRequests()                .requestMatchers("/api/v1/auth/**").permitAll()                .requestMatchers("/api/v1/news/**").permitAll()                .requestMatchers("/api/v1/region/admin", "/api/v1/region/admin/**").hasRole("ADMIN")                .anyRequest()                .authenticated()                .and().httpBasic()                .csrf().disable();//                .and().formLogin();        return http.build();    }    @Bean    public AuthenticationProvider authenticationProvider() {        // authentication (login,password)        final DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();        authenticationProvider.setUserDetailsService(userDetailsService);//        authenticationProvider.setPasswordEncoder(NoOpPasswordEncoder.getInstance());        authenticationProvider.setPasswordEncoder(passwordEncoder());        return authenticationProvider;    }    private PasswordEncoder passwordEncoder() {        return new PasswordEncoder() {            @Override            public String encode(CharSequence rawPassword) {                return rawPassword.toString();            }            @Override            public boolean matches(CharSequence rawPassword, String encodedPassword) {                return MD5Util.encode(rawPassword.toString()).equals(encodedPassword);            }        };    }}