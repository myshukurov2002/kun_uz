package com.example.util;import com.example.dto.JwtDTO;import com.example.entity.ProfileEntity;import com.example.exception.UnAuthorizedException;import io.jsonwebtoken.*;import lombok.experimental.UtilityClass;import java.util.Date;@UtilityClasspublic class JWTUtil {    private final String secretKey = "!maz234^gikey";    private final int tokenLiveTime = 1000 * 3600 * 24 * 10; // 1-day    private final int emailTokenLiveTime = 1000 * 3600 * 24 * 10; // 1-day    public static String encode(String phone, ProfileEntity.Role role) {        JwtBuilder jwtBuilder = Jwts.builder();        jwtBuilder.setIssuedAt(new Date());        jwtBuilder.signWith(SignatureAlgorithm.HS512, secretKey);        jwtBuilder.claim("phone", phone);        jwtBuilder.claim("role", role.toString());        jwtBuilder.setExpiration(new Date(System.currentTimeMillis() + (tokenLiveTime)));        jwtBuilder.setIssuer("kunuz test portali");        return jwtBuilder.compact();    }    public static JwtDTO decode(String token) {        try {            JwtParser jwtParser = Jwts.parser();            jwtParser.setSigningKey(secretKey);            Jws<Claims> jws = jwtParser.parseClaimsJws(token);            Claims claims = jws.getBody();            String phone = (String) claims.get("phone");            String role = (String) claims.get("role");            ProfileEntity.Role profileRole = ProfileEntity.Role.valueOf(role);            return new JwtDTO(phone, profileRole);        } catch (JwtException e) {            throw new UnAuthorizedException("Your session expired");        }    }    public static String encodeEmailJwt(String phone) {        JwtBuilder jwtBuilder = Jwts.builder();        jwtBuilder.setIssuedAt(new Date());        jwtBuilder.signWith(SignatureAlgorithm.HS512, secretKey);        jwtBuilder.claim("phone", phone);        jwtBuilder.setExpiration(new Date(System.currentTimeMillis() + (tokenLiveTime)));        jwtBuilder.setIssuer("kunuz test portali");        return jwtBuilder.compact();    }}