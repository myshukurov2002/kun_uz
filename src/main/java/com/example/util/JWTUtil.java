package com.example.util;import com.example.dto.JwtDTO;import com.example.entity.ProfileEntity;import com.example.exception.UnAuthorizedException;import io.jsonwebtoken.*;import lombok.experimental.UtilityClass;import java.util.Date;@UtilityClasspublic class JWTUtil {    private final String secretKey = "!maz234^gikey";    private final int tokenLiveTime = 1000 * 3600 * 24 * 100; // 1-hour    private final int emailTokenLiveTime = 1000 * 3600 * 24 * 1; // 1-hour    public String encode(Long profileId, ProfileEntity.Role role) {        JwtBuilder jwtBuilder = Jwts.builder();        jwtBuilder.setIssuedAt(new Date());        jwtBuilder.signWith(SignatureAlgorithm.HS512, secretKey);        jwtBuilder.claim("id", profileId);        jwtBuilder.setExpiration(new Date(System.currentTimeMillis() + (tokenLiveTime)));        jwtBuilder.setIssuer("kunuz test portali");        return jwtBuilder.compact();    }    public String encodeEmailJwt(Long profileId) {        JwtBuilder jwtBuilder = Jwts.builder();        jwtBuilder.setIssuedAt(new Date());        jwtBuilder.signWith(SignatureAlgorithm.HS512, secretKey);        jwtBuilder.claim("id", profileId);        jwtBuilder.setExpiration(new Date(System.currentTimeMillis() + (emailTokenLiveTime)));        jwtBuilder.setIssuer("kunuz test portali");        return jwtBuilder.compact();    }    public JwtDTO decode(String token) {        try {            JwtParser jwtParser = Jwts.parser();            jwtParser.setSigningKey(secretKey);            Jws<Claims> jws = jwtParser.parseClaimsJws(token);            Claims claims = jws.getBody();            Integer id = (Integer) claims.get("id");            String role = (String) claims.get("role");            JwtDTO jwtDTO = new JwtDTO(Long.valueOf(id), ProfileEntity.Role.valueOf(role));            System.out.println("role: " + jwtDTO.getRole().name());            return jwtDTO;        } catch (JwtException e) {            throw new UnAuthorizedException("Your session expired!");        }    }    public static JwtDTO decodeEmailJwt(String token) {        try {            JwtParser jwtParser = Jwts.parser();            jwtParser.setSigningKey(secretKey);            Jws<Claims> jws = jwtParser.parseClaimsJws(token);            Claims claims = jws.getBody();            Long id = (Long) claims.get("id");            return new JwtDTO(id, null);        } catch (JwtException e) {            throw new UnAuthorizedException("Your session expired");        }    }}