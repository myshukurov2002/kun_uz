package com.example.util;import com.example.dto.JwtDTO;import com.example.entity.ProfileEntity;import com.example.exception.AppMethodNotAllowedException;import com.example.exception.UnAuthorizedException;import lombok.experimental.UtilityClass;@UtilityClasspublic class SecurityUtil {    public JwtDTO getJwtDTO(String authToken) {        if (authToken.startsWith("Bearer ")) {            String jwt = authToken.substring(7);            return JWTUtil.decode(jwt);        }        throw new UnAuthorizedException("Not authorized");    }    public JwtDTO hasRole(String authToken, ProfileEntity.Role... requiredRoles) {        JwtDTO jwtDTO = getJwtDTO(authToken);        if (requiredRoles == null) {            return jwtDTO;        }        Boolean found = false;        for (ProfileEntity.Role role : requiredRoles) {            if(jwtDTO.getRole().equals(role)) {                found = true;                break;            }        }        if (!found) {            throw new AppMethodNotAllowedException("method not allowed!");        }        return jwtDTO;    }}