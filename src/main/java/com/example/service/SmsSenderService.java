package com.example.service;import com.example.dto.ApiResponse;import com.example.dto.CustomerDTO;import com.example.entity.SmsHistoryEntity;import com.example.repository.SmsHistoryRepository;import com.example.util.RandomUtil;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.*;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Future;import java.util.concurrent.TimeUnit;@Servicepublic class SmsSenderService {    @Autowired    private SmsHistoryRepository smsHistoryRepository;    @Value("${sms-provider.url}")    private String SMS_URL;    @Autowired    private ObjectMapper objectMapper;    public ApiResponse sendRegistrationSms(String phone) {        String smsCode = RandomUtil.getRandomSmsCode();        String text = "kun.uz tasdiqlash kodi: " + smsCode;        return sendSmsHTTP(phone, text, smsCode);    }    public ApiResponse sendSmsHTTP(String phone, String text, String smsCode) {        String smsHttpUrl = SMS_URL + "/api/v1/auth/close/create";        HttpHeaders headers = new HttpHeaders();        headers.setContentType(MediaType.APPLICATION_JSON);        headers.setBearerAuth(getSmsToken());        try {            CustomerDTO dto = new CustomerDTO(phone, text, text);            String requestBody = objectMapper.writeValueAsString(dto);            HttpEntity<String> requestEntity = new HttpEntity<>(requestBody, headers);            RestTemplate restTemplate = new RestTemplate();            ExecutorService executor = Executors.newSingleThreadExecutor();            try {                Future<ResponseEntity<String>> future = executor.submit(() ->                        restTemplate.exchange(smsHttpUrl, HttpMethod.POST, requestEntity, String.class));                // Wait 10 seconds                ResponseEntity<String> responseEntity = future.get(10, TimeUnit.SECONDS);                if (responseEntity.getStatusCode().is2xxSuccessful()) {                    SmsHistoryEntity entity = new SmsHistoryEntity();                    entity.setStatus(SmsHistoryEntity.Status.NEW);                    entity.setPhone(phone);                    entity.setMessage(smsCode);                    smsHistoryRepository.save(entity);                    return new ApiResponse(true, "REQUEST WAS SUCCESSFUL! Response: " + responseEntity.getBody());                } else {                    return new ApiResponse(false, "FAILED TO SEND REQUEST! Response: " + responseEntity.getBody());                }            } finally {                executor.shutdown();            }        } catch (Exception e) {            throw new RuntimeException(e);        }    }    private String getSmsToken() {        return "eyJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE2OTEyMjgzNTAsImxvZ2luIjoia3VudXoiLCJwYXNzd2QiOiIxMjMiLCJleHAiOjE2OTIwOTIzNTAsImlzcyI6Imt1bnV6IHRlc3QgcG9ydGFsaSJ9.mqI94vyaTs3iO58gRcAnX-eoClw3pXM3WJvyYyMFrFsaoyr-gI6Bth8ZXw_jiNg1uiOQb3D_OTvlNz6Iu55K7w";    }}