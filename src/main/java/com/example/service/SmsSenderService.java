package com.example.service;import com.example.dto.ApiResponse;import com.example.dto.CustomerDTO;import com.example.entity.SmsHistoryEntity;import com.example.repository.SmsHistoryRepository;import com.example.util.RandomUtil;import org.codehaus.jackson.map.ObjectMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.*;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;import java.io.IOException;import java.time.LocalDateTime;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;@Servicepublic class SmsSenderService {    @Autowired    private ObjectMapper objectMapper;    @Autowired    private SmsHistoryRepository smsHistoryRepository;    @Value("${sms-provider.url}")    private String SMS_URL;    public ApiResponse sendRegistrationSms(String phone) {        String smsCode = RandomUtil.getRandomSmsCode();        String text = "Kunuz-test ro'yhatdan o'tish uchun tasdiqlash kodi: \n" + smsCode;        return sendSmsHTTP(phone, text, smsCode);    }    public ApiResponse sendSmsHTTP(String phone, String text, String smsCode) {//        ExecutorService executor = Executors.newSingleThreadExecutor(); //TODO        String smsHttpUrl = SMS_URL + "/api/v1/auth/close/create";        HttpHeaders headers = new HttpHeaders();        headers.setContentType(MediaType.APPLICATION_JSON);        headers.setBearerAuth(getSmsToken());        try {            String requestBody = objectMapper                    .writeValueAsString(new CustomerDTO(phone, smsCode, text));            HttpEntity<String> requestEntity = new HttpEntity<>(requestBody, headers);            RestTemplate restTemplate = new RestTemplate();            ResponseEntity<String> responseEntity = restTemplate.exchange(smsHttpUrl, HttpMethod.POST, requestEntity, String.class);            if (responseEntity.getStatusCode().is2xxSuccessful()) {                SmsHistoryEntity entity = new SmsHistoryEntity();                entity.setStatus(SmsHistoryEntity.Status.NEW);                entity.setPhone(phone);                entity.setMessage(smsCode);                smsHistoryRepository.save(entity);                return new ApiResponse(true, "REQUEST WAS SUCCESSFUL! Response: " + responseEntity.getBody());            } else {                return new ApiResponse(false, "FAILED TO SEND REQUEST! Response: " + responseEntity.getBody());            }        } catch (IOException e) {            throw new RuntimeException(e);        }    }    private String getSmsToken() {        return "eyJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE2OTEwNjI3NDMsImxvZ2luIjoia3VudXoiLCJwYXNzd2QiOiIxMjM0NTZtYXpnaSIsImV4cCI6MTY5MTExMjgwOSwiaXNzIjoia3VudXogdGVzdCBwb3J0YWxpIn0.GNkcpRmD3GfIxYYIBO0Ud59QiBsW-0WHP-qVdQvoDasQWfi5Lqga-QPBkxNJQpj9bFSE2t_B-uE4hchMaqmFeQ";    }}