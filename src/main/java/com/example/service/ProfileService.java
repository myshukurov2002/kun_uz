package com.example.service;import com.example.dto.ProfileDTO;import com.example.entity.ProfileEntity;import com.example.exception.AppBadRequestException;import com.example.exception.ItemNotFoundException;import com.example.repository.ProfileRepository;import com.example.util.MD5Util;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.*;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@Servicepublic class ProfileService {    @Autowired    ProfileRepository profileRepository;    public ProfileDTO create(ProfileDTO profileDTO, Long profileId) {        if (check(profileDTO)) {            ProfileEntity createdProfile = DTO_TO_ENTITY(profileDTO);            ProfileEntity savedProfile = profileRepository.save(createdProfile);            savedProfile.setPassword(profileDTO.getPassword());            return ENTITY_TO_DTO(savedProfile);        }        return null;    }    private ProfileDTO ENTITY_TO_DTO(ProfileEntity profileEntity) {        ProfileDTO profileDTO = new ProfileDTO();        profileDTO.setName(profileEntity.getName());        profileDTO.setSurname(profileEntity.getSurname());        profileDTO.setEmail(profileEntity.getEmail());        profileDTO.setPhone(profileEntity.getPhone());        profileDTO.setPassword(profileEntity.getPassword());        profileDTO.setStatus(profileEntity.getStatus());        profileDTO.setRole(profileEntity.getRole());        profileDTO.setVisibility(profileEntity.getVisibility());        profileDTO.setCreatedDate(profileEntity.getCreatedDate());//        profileDTO.setImageId(profileEntity.getImage().getId());        return profileDTO;    }    private ProfileEntity DTO_TO_ENTITY(ProfileDTO profileDTO) {        ProfileEntity profileEntity = new ProfileEntity();        profileEntity.setName(profileDTO.getName());        profileEntity.setSurname(profileDTO.getSurname());        profileEntity.setEmail(profileDTO.getEmail());        profileEntity.setPhone(profileDTO.getPhone());        profileEntity.setPassword(MD5Util.encode(profileDTO.getPassword()));        profileEntity.setStatus(profileDTO.getStatus());        profileEntity.setRole(profileDTO.getRole());        return profileEntity;    }    private boolean check(ProfileDTO profileDTO) {        if (profileDTO.getName() == null) {            throw new AppBadRequestException("name is null!");        }        if (profileDTO.getSurname() == null) {            throw new AppBadRequestException("surname is null!");        }        if (profileDTO.getEmail() == null) {            throw new AppBadRequestException("email is null!");        }        if (profileDTO.getPhone() == null) {            throw new AppBadRequestException("phone is null!");        }        if (profileDTO.getPassword() == null) {            throw new AppBadRequestException("password is null!");        }        if (profileDTO.getStatus() == null) {            throw new AppBadRequestException("status is null!");        }        if (profileDTO.getRole() == null) {            throw new AppBadRequestException("role is null!");        }//        if (profileDTO.getCreatedDate() != null) {//            throw new AppBadRequestException("created date is null!");//        }//        if (profileDTO.getVisibility() == null) {//            throw new AppBadRequestException("visibility is null!");//        }//        if (profileDTO.getImageId() != null) {//            throw new AppBadRequestException("image is null!");//        }        return true;    }    public ProfileDTO update(Long id, ProfileDTO profileDTO) {        if (check(profileDTO)) {            Optional<ProfileEntity> optionalProfile = profileRepository.findById(id);            if (optionalProfile.isPresent()) {                ProfileEntity updatedProfile = optionalProfile.get();                updatedProfile.setName(profileDTO.getName());                updatedProfile.setSurname(profileDTO.getSurname());                updatedProfile.setEmail(profileDTO.getEmail());                updatedProfile.setPhone(profileDTO.getPhone());                updatedProfile.setPassword(profileDTO.getPassword());                updatedProfile.setStatus(profileDTO.getStatus());                updatedProfile.setRole(profileDTO.getRole());                updatedProfile.setVisibility(profileDTO.getVisibility());                ProfileEntity saved = profileRepository.save(updatedProfile);                return ENTITY_TO_DTO(saved);            }        }        return null;    }    public ProfileDTO updateDetail(Long id, ProfileDTO profileDTO) {        if (check(profileDTO)) {            Optional<ProfileEntity> optionalProfile = profileRepository.findById(id);            if (optionalProfile.isPresent()) {                ProfileEntity updatedProfile = optionalProfile.get();                updatedProfile.setName(profileDTO.getName());                updatedProfile.setSurname(profileDTO.getSurname());                updatedProfile.setEmail(profileDTO.getEmail());                updatedProfile.setPhone(profileDTO.getPhone());                updatedProfile.setPassword(profileDTO.getPassword());                updatedProfile.setStatus(profileDTO.getStatus());                updatedProfile.setRole(profileDTO.getRole());                updatedProfile.setVisibility(profileDTO.getVisibility());                ProfileEntity saved = profileRepository.save(updatedProfile);                return ENTITY_TO_DTO(saved);            }        }        return null;    }    public Page<ProfileDTO> getList(Integer page, Integer size) {        Sort sort = Sort.by("createdDate").ascending();        Pageable pageable = PageRequest.of(page, size, sort);        Page<ProfileEntity> profileEntityPage = profileRepository                .findAll(pageable);        List<ProfileDTO> profileDTOList = profileEntityPage                .stream()                .map(this::ENTITY_TO_DTO)                .toList();        return new PageImpl<>(profileDTOList, pageable, profileEntityPage.getTotalElements());    }    public String delete(Long adminId, Long id) {        if (profileRepository.existsById(id)) {            profileRepository.deleteById(id);            return "SUCCESS";        }        return "USER IS NOT EXISTS";    }    public ProfileDTO getById(Long id) {        Optional<ProfileEntity> byId = profileRepository.findById(id);        try {            ProfileEntity profileEntity = byId.orElseThrow(() -> new ItemNotFoundException("Item not found"));            return ENTITY_TO_DTO(profileEntity);        } catch (ItemNotFoundException e) {            throw new RuntimeException(e);        }    }}