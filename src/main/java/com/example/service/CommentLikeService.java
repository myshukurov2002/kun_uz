package com.example.service;import com.example.config.CustomUserDetails;import com.example.dto.ApiResponse;import com.example.dto.CommentLikeDTO;import com.example.entity.CommentLikeEntity;import com.example.exception.AppBadRequestException;import com.example.repository.CommentLikeRepository;import com.example.repository.CommentRepository;import com.example.util.SpringSecurityUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Optional;@Servicepublic class CommentLikeService {    @Autowired    private CommentLikeRepository commentLikeRepository;    @Autowired    private CommentRepository commentRepository;    private boolean check(CommentLikeDTO commentLike) {        if (commentLike.getCommentId() == null) {            throw new AppBadRequestException("comment id is null!");        }        return true;    }    private CommentLikeEntity DTO_TO_ENTITY(CommentLikeDTO commentLikeDTO) {        CommentLikeEntity commentLikeEntity = new CommentLikeEntity();        commentLikeEntity.setCommentId(commentLikeDTO.getCommentId());        return commentLikeEntity;    }    private CommentLikeDTO ENTITY_TO_DTO(CommentLikeEntity commentLikeEntity) {        CommentLikeDTO commentLikeDTO = new CommentLikeDTO();        commentLikeDTO.setId(commentLikeEntity.getId());        commentLikeDTO.setProfileId(commentLikeEntity.getProfileId());        commentLikeDTO.setCommentId(commentLikeEntity.getCommentId());        commentLikeDTO.setStatus(commentLikeEntity.getStatus());        commentLikeDTO.setCreatedDate(commentLikeEntity.getCreatedDate());        commentLikeDTO.setVisibility(commentLikeEntity.getVisibility());        return commentLikeDTO;    }    public ApiResponse createLike(CommentLikeDTO commentLikeDTO) {        CustomUserDetails customUserDetails = SpringSecurityUtil.getCurrentUser();        if (check(commentLikeDTO)) {            Optional<CommentLikeEntity> optionalCommentLikeEntity =                    commentLikeRepository.findByProfileIdAndCommentId(customUserDetails.getProfileEntity().getId(), commentLikeDTO.getCommentId());            if (optionalCommentLikeEntity.isPresent() ) {                CommentLikeEntity commentLikeEntity = optionalCommentLikeEntity.get();                if (commentLikeEntity.getStatus().equals(CommentLikeEntity.Status.LIKE)) {//                    commentLikeEntity.setStatus(null);                    commentLikeRepository.deleteById(commentLikeEntity.getId());//                    commentLikeRepository.save(commentLikeEntity);                    return new ApiResponse(true, "SUCCESS LIKE REMOVED!");                } else {                    commentLikeEntity.setStatus(CommentLikeEntity.Status.LIKE);                    commentLikeRepository.save(commentLikeEntity);                    return new ApiResponse(true, "SUCCESS UPDATED STATUS TO " + commentLikeEntity.getStatus().name());                }            } else {                CommentLikeEntity newCommentLikeEntity = new CommentLikeEntity();                newCommentLikeEntity.setStatus(CommentLikeEntity.Status.LIKE);                newCommentLikeEntity.setCommentId(commentLikeDTO.getCommentId());                newCommentLikeEntity.setProfileId(customUserDetails.getProfileEntity().getId());                commentLikeRepository.save(newCommentLikeEntity);                return new ApiResponse(true, "SUCCESS CREATED LIKE STATUS TO" + newCommentLikeEntity.getStatus().name());            }        }        return new ApiResponse(false, "FAILED TO CREATE LIKE!");    }    public ApiResponse createdLike(CommentLikeDTO commentLikeDTO) {        CustomUserDetails customUserDetails = SpringSecurityUtil.getCurrentUser();        if (check(commentLikeDTO)) {            Optional<CommentLikeEntity> optionalCommentLikeEntity =                    commentLikeRepository.findByProfileIdAndCommentId(customUserDetails.getProfileEntity().getId(), commentLikeDTO.getCommentId());            if (optionalCommentLikeEntity.isPresent()) {                CommentLikeEntity commentLikeEntity = optionalCommentLikeEntity.get();                if (commentLikeEntity.getStatus().equals(CommentLikeEntity.Status.DIS_LIKE)) {                    commentLikeRepository.deleteById(commentLikeDTO.getCommentId());                    return new ApiResponse(true, "SUCCESS REMOVED DISLIKE");                } else {                    commentLikeEntity.setStatus(CommentLikeEntity.Status.DIS_LIKE);                    commentLikeRepository.save(commentLikeEntity);                    return new ApiResponse(true, "SUCCESS UPDATED STATUS TO " + commentLikeEntity.getStatus().name());                }            } else {                CommentLikeEntity newCommentLikeEntity = new CommentLikeEntity();                newCommentLikeEntity.setStatus(CommentLikeEntity.Status.DIS_LIKE);                newCommentLikeEntity.setCommentId(commentLikeDTO.getCommentId());                newCommentLikeEntity.setProfileId(customUserDetails.getProfileEntity().getId());                commentLikeRepository.save(newCommentLikeEntity);                return new ApiResponse(true, "SUCCESS CREATED LIKE STATUS TO" + newCommentLikeEntity.getStatus().name());            }        }        return new ApiResponse(false, "FAILED TO CREATE DIS_LIKE!");    }}