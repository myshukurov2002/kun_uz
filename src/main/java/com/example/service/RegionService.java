package com.example.service;import com.example.config.CustomUserDetails;import com.example.dto.RegionDTO;import com.example.entity.RegionEntity;import com.example.exception.AppBadRequestException;import com.example.mapper.RegionMapper;import com.example.repository.RegionRepository;import com.example.util.SpringSecurityUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.*;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;@Servicepublic class RegionService {    @Autowired    RegionRepository regionRepository;    public RegionDTO create(RegionDTO regionDTO) {        CustomUserDetails customUserDetails = SpringSecurityUtil.getCurrentUser();        if (check(regionDTO)) {            RegionEntity regionEntity = new RegionEntity();            regionEntity.setPrtId(customUserDetails.getProfileEntity().getId());            regionEntity.setOrderNumber(regionDTO.getOrderNumber());            regionEntity.setNameUZ(regionDTO.getNameUZ());            regionEntity.setNameRU(regionDTO.getNameRU());            regionEntity.setNameEN(regionDTO.getNameEN());            return ENTITY_TO_DTO(regionRepository.save(regionEntity));        }        return null;    }    private RegionDTO ENTITY_TO_DTO(RegionEntity save) {        RegionDTO regionDTO = new RegionDTO();        regionDTO.setId(save.getId());        regionDTO.setOrderNumber(save.getOrderNumber());        regionDTO.setNameRU(save.getNameRU());        regionDTO.setNameEN(save.getNameEN());        regionDTO.setNameUZ(save.getNameUZ());        regionDTO.setVisibility(save.getVisibility());        regionDTO.setCreatedDate(save.getCreatedDate());        return regionDTO;    }    private boolean check(RegionDTO regionDTO) {        if (regionDTO.getOrderNumber() == null) {            throw new AppBadRequestException("order is null");        }        if (regionDTO.getNameRU() == null) {            throw new AppBadRequestException("nameRU is null");        }        if (regionDTO.getNameEN() == null) {            throw new AppBadRequestException("nameEN is null");        }        if (regionDTO.getNameUZ() == null) {            throw new AppBadRequestException("nameUZ is null");        }        return true;    }    public Boolean update(Long id, RegionDTO regionDTO) {        if (regionRepository.existsById(id) &&                check(regionDTO)) {            Integer effect = regionRepository.updateById(id, regionDTO.getOrderNumber(),                    regionDTO.getNameUZ(), regionDTO.getNameRU(), regionDTO.getNameEN());            return effect == 1;        }        return false;    }    public Page<RegionDTO> getList(Integer page, Integer size) {        Sort sort = Sort.by("createdDate").ascending();        Pageable pageable = PageRequest.of(page, size, sort);        Page<RegionEntity> regionEntityPage = regionRepository.findAll(pageable);        List<RegionDTO> regionDTOList = regionEntityPage.getContent()                .stream()                .map(this::ENTITY_TO_DTO)                .toList();        return new PageImpl<>(regionDTOList, pageable, regionEntityPage.getTotalElements());    }    private RegionEntity DTO_TO_ENTITY(RegionDTO regionDTO) {        RegionEntity regionEntity = new RegionEntity();        regionEntity.setOrderNumber(regionDTO.getOrderNumber());        regionEntity.setNameEN(regionDTO.getNameEN());        regionEntity.setNameUZ(regionEntity.getNameUZ());        regionEntity.setNameRU(regionDTO.getNameRU());        return regionEntity;    }    public void deleteById(Long id) {        regionRepository.deleteById(id);    }    public Page<RegionDTO> getByLang(RegionEntity.Language lang, Integer page, Integer size) {        Sort sort = Sort.by("created_date").ascending();        Pageable pageable = PageRequest.of(page, size, sort);        Page<RegionMapper> regionMapperPage = regionRepository.getAllByLang(lang.name(), pageable);        List<RegionDTO> regionDTOList = new ArrayList<>();        regionMapperPage.forEach(mapper -> {            RegionDTO regionDTO = new RegionDTO();            regionDTO.setId(mapper.getId());            regionDTO.setName(mapper.getName());            regionDTO.setOrderNumber(mapper.getOrderNumber());            regionDTOList.add(regionDTO);        });        return new PageImpl<>(regionDTOList, pageable, regionMapperPage.getTotalElements());    }}