package com.example.service;import com.example.dto.CategoryDTO;import com.example.dto.RegionDTO;import com.example.entity.CategoryEntity;import com.example.entity.RegionEntity;import com.example.exception.AppBadRequestException;import com.example.mapper.CategoryMapper;import com.example.mapper.RegionMapper;import com.example.repository.CategoryRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.*;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import java.util.Optional;@Servicepublic class CategoryService {    @Autowired    private CategoryRepository categoryRepository;    public CategoryDTO create(CategoryDTO categoryDTO) {        if (check(categoryDTO)) {            CategoryEntity createdCategory = DTO_TO_ENTITY(categoryDTO);            CategoryEntity savedCategory = categoryRepository.save(createdCategory);            return ENTITY_TO_DTO(savedCategory);        }        return null;    }    private CategoryDTO ENTITY_TO_DTO(CategoryEntity savedCategory) {        CategoryDTO categoryDTO = new CategoryDTO();        categoryDTO.setId(savedCategory.getId());        categoryDTO.setVisibility(savedCategory.getVisibility());        categoryDTO.setNameUZ(savedCategory.getNameUZ());        categoryDTO.setNameRU(savedCategory.getNameRU());        categoryDTO.setNameEN(savedCategory.getNameEN());        categoryDTO.setCreatedDate(savedCategory.getCreatedDate());        return categoryDTO;    }    private CategoryEntity DTO_TO_ENTITY(CategoryDTO categoryDTO) {        CategoryEntity updatedCategoryEntity = new CategoryEntity();        updatedCategoryEntity.setOrderNumber(categoryDTO.getOrderNumber());        updatedCategoryEntity.setNameUZ(categoryDTO.getNameUZ());        updatedCategoryEntity.setNameRU(categoryDTO.getNameRU());        updatedCategoryEntity.setNameEN(categoryDTO.getNameEN());        updatedCategoryEntity.setVisibility(categoryDTO.getVisibility());        return updatedCategoryEntity;    }    private boolean check(CategoryDTO categoryDTO) {        if (categoryDTO.getNameUZ() == null) {            throw new AppBadRequestException("name uz is null!");        }        if (categoryDTO.getNameRU() == null) {            throw new AppBadRequestException("name ru is null!");        }        if (categoryDTO.getNameEN() == null) {            throw new AppBadRequestException("name en is null!");        }        if (categoryDTO.getOrderNumber() == null) {            throw new AppBadRequestException("order is null!");        }        return true;    }    public CategoryDTO update(Integer id, CategoryDTO categoryDTO) {        Optional<CategoryEntity> optionalCategoryEntity = categoryRepository.findById(id);        if (optionalCategoryEntity.isPresent()) {            CategoryEntity updatedCategoryEntity = optionalCategoryEntity.get();            updatedCategoryEntity.setNameRU(categoryDTO.getNameRU());            updatedCategoryEntity.setNameUZ(categoryDTO.getNameUZ());            updatedCategoryEntity.setNameEN(categoryDTO.getNameEN());            updatedCategoryEntity.setOrderNumber(categoryDTO.getOrderNumber());            updatedCategoryEntity.setVisibility(categoryDTO.getVisibility());            CategoryEntity savedCategory = categoryRepository.save(updatedCategoryEntity);            return ENTITY_TO_DTO(savedCategory);        }        return null;    }    public String delete(Integer id) {        if (categoryRepository.existsById(id)) {            categoryRepository.deleteById(id);            return "SUCCESS";        }        return "FAILED";    }    public Page<CategoryDTO> getByLang(CategoryEntity.Language lang, Integer page, Integer size) {        Sort sort = Sort.by("created_date").ascending();        Pageable pageable = PageRequest.of(page, size, sort);        Page<CategoryMapper> regionMapperPage = categoryRepository.getAllByLang(lang.name(), pageable);        List<CategoryDTO> categoryDTOList = new ArrayList<>();        regionMapperPage.forEach(mapper -> {            CategoryDTO categoryDTO = new CategoryDTO();            categoryDTO.setId(mapper.getId());            categoryDTO.setName(mapper.getName());            categoryDTO.setOrderNumber(mapper.getOrderNumber());            categoryDTOList.add(categoryDTO);        });        return new PageImpl<>(categoryDTOList, pageable, regionMapperPage.getTotalElements());    }    private List<CategoryDTO> ENTITY_TO_DTO(Page<CategoryEntity> categoryEntityPage) {        return categoryEntityPage                .stream()                .map(this::ENTITY_TO_DTO)                .toList();    }}