package com.example.service;import com.example.dto.ApiResponse;import com.example.dto.CommentDTO;import com.example.entity.CommentEntity;import com.example.exception.AppBadRequestException;import com.example.repository.ArticleRepository;import com.example.repository.CommentRepository;import com.example.repository.ProfileRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Optional;@Servicepublic class CommentService {    @Autowired    private CommentRepository commentRepository;    @Autowired    private ProfileRepository profileRepository;    @Autowired    private ArticleRepository articleRepository;    private boolean check(CommentDTO commentDTO) {        if (commentDTO.getContent() == null) {            throw new AppBadRequestException("Content is null!");        }        if (commentDTO.getArticleId() == null) {            throw new AppBadRequestException("Article is null!");        }        return true;    }    public CommentDTO ENTITY_TO_DTO(CommentEntity commentEntity) {        CommentDTO commentDTO = new CommentDTO();        commentDTO.setProfileId(commentEntity.getProfileId());        commentDTO.setProfileEntity(commentEntity.getProfileEntity());        commentDTO.setContent(commentEntity.getContent());        commentDTO.setArticleId(commentEntity.getArticleId());        commentDTO.setArticleEntity(commentEntity.getArticleEntity());        commentDTO.setReplyCommentId(commentEntity.getReplyCommentId());        commentDTO.setReplyComment(commentEntity.getReplyCommentEntity());        return commentDTO;    }    public CommentEntity DTO_TO_ENTITY(CommentDTO commentDTO) {        CommentEntity commentEntity = new CommentEntity();        commentEntity.setContent(commentDTO.getContent());        commentEntity.setArticleId(commentDTO.getArticleId());        commentEntity.setArticleEntity(commentDTO.getArticleEntity());        commentEntity.setReplyCommentId(commentDTO.getReplyCommentId());        commentEntity.setReplyCommentEntity(commentDTO.getReplyComment());        return commentEntity;    }    public ApiResponse create(Long profileId, CommentDTO commentDTO) {        if (check(commentDTO)) {            CommentEntity commentEntity = DTO_TO_ENTITY(commentDTO);            commentEntity.setProfileId(profileId);            commentEntity.setProfileEntity(profileRepository.getById(profileId));            CommentEntity savedComment = commentRepository.save(commentEntity);            return new ApiResponse(true, ENTITY_TO_DTO(savedComment));        }        return new ApiResponse(false, "Comment an error to created!");    }    public ApiResponse update(String commentId, CommentDTO commentDTO) {        Optional<CommentEntity> optionalComment = commentRepository.findById(commentId);        if (check(commentDTO) &&                optionalComment.isPresent()) {            CommentEntity updatedComment = optionalComment.get();            updatedComment.setContent(commentDTO.getContent());            updatedComment.setArticleId(commentDTO.getArticleId());            updatedComment.setArticleEntity(articleRepository.getById(commentDTO.getArticleId()));            CommentEntity savedComment = commentRepository.save(updatedComment);            return new ApiResponse(true, ENTITY_TO_DTO(savedComment));        }        return new ApiResponse(false, "Comment an error to updated!");    }    public ApiResponse delete(String id, CommentDTO commentDTO) {        if (commentRepository.existsById(commentDTO.getI)) {            CommentEntity updatedComment = optionalComment.get();            updatedComment.setContent(commentDTO.getContent());            updatedComment.setArticleId(commentDTO.getArticleId());            updatedComment.setArticleEntity(articleRepository.getById(commentDTO.getArticleId()));            CommentEntity savedComment = commentRepository.save(updatedComment);            return new ApiResponse(true, ENTITY_TO_DTO(savedComment));        }        return new ApiResponse(false, "Comment an error to updated!");    }}