package com.example.service;import com.example.dto.ApiResponse;import com.example.entity.EmailHistoryEntity;import com.example.repository.EmailAddressRepository;import com.example.util.HTMLUtil;import com.example.util.JWTUtil;import jakarta.mail.MessagingException;import jakarta.mail.internet.MimeMessage;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.mail.SimpleMailMessage;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.stereotype.Service;import java.nio.charset.StandardCharsets;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;@Servicepublic class MailSanderService {    @Autowired    private JavaMailSender javaMailSender;    @Autowired    private EmailAddressRepository emailAddressRepository;    @Autowired    private EmailHistoryService emailHistoryService;    @Value("${server.url}")    private String serverUrl;    @Value("${spring.mail.username}")    private String fromEmail;    void sendMimeEmail(String toAccount, String subject, String text) {        try {            MimeMessage msg = javaMailSender.createMimeMessage();            MimeMessageHelper helper = new MimeMessageHelper(msg, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, StandardCharsets.UTF_8.name());            msg.setFrom(fromEmail);            helper.setTo(toAccount);            helper.setSubject(subject);            helper.setText(text, true);            javaMailSender.send(msg);        } catch (MessagingException e) {            throw new RuntimeException(e);        }    }    public ApiResponse sendEmailVerification(String toAccount, String phone) {        ExecutorService executor = Executors.newSingleThreadExecutor();        String jwt = JWTUtil.encodeEmailJwt(phone);//        serverUrl = "http://localhost:8080";        String url = serverUrl + "/api/v1/mail-sender/verification/email/" + jwt;        executor.submit(() -> {            sendMimeEmail(toAccount, "Kun.uz registration compilation", HTMLUtil.getRegistrationButton(url));            EmailHistoryEntity entity = new EmailHistoryEntity();            entity.setEmail(toAccount);            entity.setMessage(url);            emailHistoryService.create(entity);            executor.shutdown();        });        return new ApiResponse(true, "SUCCESS COMPLETED REGISTRATION!");    }}