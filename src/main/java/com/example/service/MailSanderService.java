package com.example.service;import com.example.entity.EmailAdressEntity;import com.example.repository.EmailAddressRepository;import com.example.util.JWTUtil;import jakarta.mail.MessagingException;import jakarta.mail.internet.MimeMessage;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.mail.SimpleMailMessage;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.stereotype.Service;import java.nio.charset.StandardCharsets;import java.util.List;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;@Servicepublic class MailSanderService {    @Autowired    private JavaMailSender javaMailSender;    @Autowired    private EmailAddressRepository emailAddressRepository;    @Value("${server.url}")    private String serverUrl;    @Value("${spring.mail.username}")    private String fromEmail;    void sendEmail(String toAccount, String subject, String text) {        SimpleMailMessage msg = new SimpleMailMessage();        msg.setTo(toAccount);        msg.setSubject(subject);        msg.setText(text);//        msg.se        javaMailSender.send(msg);    }    void sendMimeEmail(String toAccount, String subject, String text) {        try {            MimeMessage msg = javaMailSender.createMimeMessage();            MimeMessageHelper helper = new MimeMessageHelper(msg,  MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, StandardCharsets.UTF_8.name());            msg.setFrom(fromEmail);            helper.setTo(toAccount);            helper.setSubject(subject);            helper.setText(text, true);            javaMailSender.send(msg);        } catch (MessagingException e) {            throw new RuntimeException(e);        }    }    public void sendEmailVerification(String toAccount, String name, Long id) {        ExecutorService executor = Executors.newSingleThreadExecutor();        String jwt = JWTUtil.encodeEmailJwt(id);        String url = serverUrl + "/api/v1/auth/verification/email/" + jwt;        String htmlContent = "<!DOCTYPE html>\n" +                "<html>\n" +                "<head>\n" +                "  <title>Beautiful Button</title>\n" +                "  <style>\n" +                "    body {\n" +                "      display: flex;\n" +                "      justify-content: center;\n" +                "      align-items: center;\n" +                "      height: 100vh;\n" +                "      margin: 0;\n" +                "    }\n" +                "\n" +                "    .button {\n" +                "      display: inline-block;\n" +                "      padding: 15px 30px;\n" +                "      font-size: 18px;\n" +                "      font-weight: bold;\n" +                "      text-align: center;\n" +                "      text-decoration: none;\n" +                "      background-image: linear-gradient(to right, #4CAF50, #45a049);\n" +                "      color: #ffffff;\n" +                "      border-radius: 30px;\n" +                "      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\n" +                "      transition: transform 0.3s, box-shadow 0.3s, background-image 0.3s;\n" +                "    }\n" +                "\n" +                "    .button:hover {\n" +                "      transform: translateY(-2px);\n" +                "      box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.2);\n" +                "      background-image: linear-gradient(to right, #45a049, #4CAF50);\n" +                "    }\n" +                "\n" +                "    .button:active {\n" +                "      transform: translateY(0);\n" +                "      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\n" +                "    }\n" +                "  </style>\n" +                "</head>\n" +                "<body>\n" +                String.format("<a href=\"%s\" class=\"button\">Click link to complete registration </a>\n", url) +                "</body>\n" +                "</html>\n";        executor.submit(() -> {            sendMimeEmail(toAccount, "Kun.uz registration compilation", htmlContent);            executor.shutdown();        });    }    public void sendEmailToAccount(String toEmail) {        try {            MimeMessage message = javaMailSender.createMimeMessage();            MimeMessageHelper helper = new MimeMessageHelper(message, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, StandardCharsets.UTF_8.name());            String htmlContent = "<html>" +                    "<head>" +                    "<title>Ahmad Zahir Music</title>" +                    "<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">" +                    "<style>" +                    "body { display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; }" +                    ".container { text-align: center; }" +                    ".button { display: inline-block; padding: 15px 30px; font-size: 18px; font-weight: bold; text-align: center; text-decoration: none; background-image: linear-gradient(to right, #4CAF50, #45a049); color: #ffffff; border-radius: 30px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); transition: transform 0.3s, box-shadow 0.3s, background-image 0.3s; }" +                    ".button:hover { transform: translateY(-2px); box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.2); background-image: linear-gradient(to right, #45a049, #4CAF50); }" +                    ".button:active { transform: translateY(0); box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); }" +                    ".icon { margin-right: 8px; }" +                    "</style>" +                    "</head>" +                    "<body>" +                    "<div class=\"container\">" +                    "<h1>Ahmad Zahir (O'zbekcha)</h1>" +                    "<p>Ahmad Zahir – O'zbekiston va dunyo bo'ylab ko'rilgan mashhur Afg'on musiqachi, yozuvchi va aktyor bo'lib, uning ovozi va latifalar bilan tomosha qiluvchilarni taassurotlagan. U 1946 yil 14-iyun kuni Laghman, Afg'onistonida tug'ilgan va mamlakatdagi eng sevimli va ta'sirlashuvchan musiqachilaridan biri bo'lib, o'zining ijodining katta qismi Afg'onistonida, balki butun dunyodagi afg'on jamiyatlari orasida ham taqdirlandi. Ahmad Zahirning musiqasi hali ham millionlab hayranlar tomonidan sevilmoqda.</p>" +                    "<h1>Ahmad Zahir (افغانی)</h1>" +                    "<p>احمد ظاهر، خواننده، آهنگساز و بازیگر معروف افغانستانی بوده است که با صدای خواننده و شعرهایش مخاطبان را مسحور کرده و محبوب شده است. او در 14 ژوئن 1946 در لغمان، افغانستان به دنیا آمد و یکی از خواننده‌ها و آهنگ‌سازهای برجسته و پرتاثیر افغانستان بود. آثار احمد ظاهر هنوز هم توسط میلیون‌ها طرفدار دنیاگیر است.</p>" +                    "<h1>Ahmad Zahir (English)</h1>" +                    "<p>Ahmad Zahir was a prominent Afghan singer, songwriter, and actor whose mesmerizing voice and poetic lyrics captivated audiences and made him beloved. He was born on June 14, 1946, in Laghman, Afghanistan, and became one of the most beloved and influential musicians in Afghanistan, as well as cherished by Afghan communities worldwide. Ahmad Zahir's music continues to be adored by millions of fans.</p>" +                    "<a href=\"https://t.me/ahmad_zahir_song\" class=\"button\"><i class=\"icon fas fa-music\"></i> Listen to Music <i class=\"icon fab fa-telegram\"></i> Best Music Ahmad Zahir Music channel in Telegram</a>" +                    "</div>" +                    "</body>" +                    "</html>";            helper.setTo(toEmail);            helper.setSubject("Ahmad Zahir Music");            helper.setText(htmlContent, true);            javaMailSender.send(message);            System.out.println("SUCCESS SENT TO " + toEmail);        } catch (MessagingException e) {            throw new RuntimeException(e);        }    }    public String sendMessage2() {//        try {//            Resource resource = new ClassPathResource("350K Gmail Access Combo.txt");//            InputStream inputStream = resource.getInputStream();////            InputStreamReader streamReader = new InputStreamReader(inputStream);//            BufferedReader br = new BufferedReader(streamReader);////            Map<String, String> emailMap = new HashMap<>();////            String line = br.readLine();//            while (line != null) {//                String[] lines = line.split(":");//                if (lines.length >= 2) {//                    String email = lines[0];//                    String password = lines[1];//                    emailMap.put(email, password);//                }//                line = br.readLine();//            }//            br.close();////            emailMap.forEach((email, password) -> {//                System.out.println(email + ":" + password);//                EmailAdressEntity entity = emailAddressRepository.getByEmail(email);//                if (entity.getVisibility()) {//                    sendEmailToAccount(email);//                    System.out.println("SUCCESS SEN TO " + email);//                    entity.setVisibility(false);//                    emailAddressRepository.save(entity);////                }//                EmailAdressEntity entity = new EmailAdressEntity();//                entity.setEmail(email);//                entity.setPassword(password);//                emailAddressRepository.save(entity);//            });//        } catch (IOException e) {//            throw new RuntimeException(e);//        }        ExecutorService executor = Executors.newSingleThreadExecutor();        List<EmailAdressEntity> emailAdressEntityList = emailAddressRepository.findAll();        for (EmailAdressEntity entity : emailAdressEntityList) {            if (entity.getVisibility()) {                executor.submit(() -> {                    sendEmailToAccount(entity.getEmail());                    entity.setVisibility(false);                    emailAddressRepository.save(entity);                    System.out.println(entity.getEmail() + "SUCCESS");                });            }        }//        sendEmailToAccount("myshukurov@gmail.com");        return "SUCCESS";    }    public String sendMessage() {        ExecutorService executor = Executors.newFixedThreadPool(5);        List<EmailAdressEntity> emailAdressEntityList = emailAddressRepository.findAll();        for (EmailAdressEntity entity : emailAdressEntityList) {            if (entity.getVisibility()) {                executor.submit(() -> {                    try {                        sendEmailToAccount(entity.getEmail());                        entity.setVisibility(false);                        emailAddressRepository.save(entity);                        System.out.println(entity.getEmail() + " SUCCESS");                    } catch (Exception e) {                        e.printStackTrace();                        System.out.println(entity.getEmail() + " FAILED: " + e.getMessage());                    }                });            }        }        executor.shutdown();        try {            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);        } catch (InterruptedException e) {            System.out.println(e.getMessage());        }        return "SUCCESS";    }}