package com.example.service;import com.example.dto.ApiResponse;import com.example.dto.ArticleLikeDTO;import com.example.dto.ArticleLikeDTO;import com.example.entity.ArticleLikeEntity;import com.example.entity.ArticleLikeEntity;import com.example.exception.AppBadRequestException;import com.example.repository.ArticleLikeRepository;import com.example.repository.ArticleLikeRepository;import com.example.repository.ArticleRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Optional;@Servicepublic class ArticleLikeService {    @Autowired    private ArticleLikeRepository articleLikeRepository;    private boolean check(ArticleLikeDTO articleLikeDTO) {        if (articleLikeDTO.getArticleId() == null) {            throw new AppBadRequestException("article id is null!");        }        return true;    }    private ArticleLikeEntity DTO_TO_ENTITY(ArticleLikeDTO articleLikeDTO) {        ArticleLikeEntity articleLikeEntity = new ArticleLikeEntity();        articleLikeEntity.setArticleId(articleLikeDTO.getArticleId());        return articleLikeEntity;    }    private ArticleLikeDTO ENTITY_TO_DTO(ArticleLikeEntity articleLikeEntity) {        ArticleLikeDTO articleLikeDTO = new ArticleLikeDTO();        articleLikeDTO.setId(articleLikeEntity.getId());        articleLikeDTO.setProfileId(articleLikeEntity.getProfileId());        articleLikeDTO.setArticleId(articleLikeEntity.getArticleId());        articleLikeDTO.setStatus(articleLikeEntity.getStatus());        articleLikeDTO.setCreatedDate(articleLikeEntity.getCreatedDate());        articleLikeDTO.setVisibility(articleLikeEntity.getVisibility());        return articleLikeDTO;    }    public ApiResponse createLike(Long profileId, ArticleLikeDTO articleLikeDTO) {        if (check(articleLikeDTO)) {            Optional<ArticleLikeEntity> optionalArticleLikeEntity =                    articleLikeRepository.findByProfileIdAndArticleId(profileId, articleLikeDTO.getArticleId());            if (optionalArticleLikeEntity.isPresent() ) {                ArticleLikeEntity articleLikeEntity = optionalArticleLikeEntity.get();                if (articleLikeEntity.getStatus().equals(ArticleLikeEntity.Status.LIKE)) {//                    articleLikeEntity.setStatus(null);                    articleLikeRepository.deleteById(articleLikeEntity.getId());//                    articleLikeRepository.save(articleLikeEntity);                    return new ApiResponse(true, "SUCCESS LIKE REMOVED!");                } else {                    articleLikeEntity.setStatus(ArticleLikeEntity.Status.LIKE);                    articleLikeRepository.save(articleLikeEntity);                    return new ApiResponse(true, "SUCCESS UPDATED STATUS TO " + articleLikeEntity.getStatus().name());                }            } else {                ArticleLikeEntity newArticleLikeEntity = new ArticleLikeEntity();                newArticleLikeEntity.setStatus(ArticleLikeEntity.Status.LIKE);                newArticleLikeEntity.setArticleId(articleLikeDTO.getArticleId());                newArticleLikeEntity.setProfileId(profileId);                articleLikeRepository.save(newArticleLikeEntity);                return new ApiResponse(true, "SUCCESS CREATED LIKE STATUS TO" + newArticleLikeEntity.getStatus().name());            }        }        return new ApiResponse(false, "FAILED TO CREATE LIKE!");    }    public ApiResponse createdDisLike(Long profileId, ArticleLikeDTO articleLikeDTO) {        if (check(articleLikeDTO)) {            Optional<ArticleLikeEntity> optionalArticleLikeEntity =                    articleLikeRepository.findByProfileIdAndArticleId(profileId, articleLikeDTO.getArticleId());            if (optionalArticleLikeEntity.isPresent()) {                ArticleLikeEntity articleLikeEntity = optionalArticleLikeEntity.get();                if (articleLikeEntity.getStatus().equals(ArticleLikeEntity.Status.DIS_LIKE)) {                    articleLikeRepository.deleteById(articleLikeDTO.getArticleId());                    return new ApiResponse(true, "SUCCESS REMOVED DISLIKE");                } else {                    articleLikeEntity.setStatus(ArticleLikeEntity.Status.DIS_LIKE);                    articleLikeRepository.save(articleLikeEntity);                    return new ApiResponse(true, "SUCCESS UPDATED STATUS TO " + articleLikeEntity.getStatus().name());                }            } else {                ArticleLikeEntity newArticleLikeEntity = new ArticleLikeEntity();                newArticleLikeEntity.setStatus(ArticleLikeEntity.Status.DIS_LIKE);                newArticleLikeEntity.setArticleId(articleLikeDTO.getArticleId());                newArticleLikeEntity.setProfileId(profileId);                articleLikeRepository.save(newArticleLikeEntity);                return new ApiResponse(true, "SUCCESS CREATED LIKE STATUS TO" + newArticleLikeEntity.getStatus().name());            }        }        return new ApiResponse(false, "FAILED TO CREATE DIS_LIKE!");    }}