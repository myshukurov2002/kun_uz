package com.example.service;import com.example.dto.ApiResponse;import com.example.dto.AuthDTO;import com.example.dto.ProfileDTO;import com.example.dto.RegistrationDTO;import com.example.entity.EmailHistoryEntity;import com.example.entity.ProfileEntity;import com.example.entity.SmsHistoryEntity;import com.example.repository.EmailHistoryRepository;import com.example.repository.ProfileRepository;import com.example.repository.SmsHistoryRepository;import com.example.util.JWTUtil;import com.example.util.MD5Util;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import javax.imageio.ImageIO;import java.awt.image.BufferedImage;import java.io.ByteArrayOutputStream;import java.io.File;import java.time.LocalDateTime;import java.util.Optional;@Servicepublic class AuthService {    @Autowired    ProfileRepository profileRepository;    @Autowired    private MailSanderService mailSanderService;    @Autowired    private EmailHistoryRepository emailHistoryRepository;    @Autowired    private SmsSenderService smsSenderService;    @Autowired    private SmsHistoryRepository smsHistoryRepository;    @Value("${server.url}")    private String serverUrl;    @Autowired    private ObjectMapper objectMapper;    public byte[] loadImage(String fileName) {        try {            BufferedImage originalImage = ImageIO.read(new File("attaches/" + fileName));            ByteArrayOutputStream baos = new ByteArrayOutputStream();            ImageIO.write(originalImage, "png", baos);            baos.flush();            byte[] imageInByte = baos.toByteArray();            baos.close();            return imageInByte;        } catch (Exception e) {            return new byte[0];        }    }    public ApiResponse login(AuthDTO authDTO) {        Optional<ProfileEntity> optionalProfile = profileRepository                .findByPhone(authDTO.getPhone());        if (optionalProfile.isEmpty()) {            return new ApiResponse(false, "login or phone not found!");        }        ProfileEntity profileEntity = optionalProfile.get();        if (!profileEntity.getPassword().equals(MD5Util.encode(authDTO.getPassword()))) {            return new ApiResponse(false, "login or phone not found!");        }        if (profileEntity.getStatus().equals(ProfileEntity.Status.INACTIVE)) {            return new ApiResponse(false, "your status inactive!");        }        ProfileDTO response = new ProfileDTO();        response.setName(profileEntity.getName());        response.setSurname(profileEntity.getSurname());        response.setId(profileEntity.getId());        response.setRole(profileEntity.getRole());        response.setPhone(profileEntity.getPhone());        response.setJwt(JWTUtil.encode(profileEntity.getPhone(), profileEntity.getRole()));        return new ApiResponse(true, response);    }    public ApiResponse registration(RegistrationDTO registrationDTO) {        Optional<ProfileEntity> optionalProfile = profileRepository.findByEmail(registrationDTO.getEmail());        if (optionalProfile.isPresent()) {            if (optionalProfile.get().getStatus().equals(ProfileEntity.Status.REGISTRATION)) {                profileRepository.delete(optionalProfile.get()); // delete            } else {                return new ApiResponse(false, "Email already exists.");            }        }//        Long count = emailHistoryRepository.countAllByEmailAndCreatedDateAfter(registrationDTO.getEmail(), LocalDateTime.now().minusMinutes(1));//        if (count > 4) {//            return new ApiResponse(false, "TRY AGAIN LATER AROUND 1 MINUT!!");//        }        {            EmailHistoryEntity emailHistoryEntity = new EmailHistoryEntity();            emailHistoryEntity.setMessage(registrationDTO.toString());            emailHistoryEntity.setEmail(registrationDTO.getEmail());            emailHistoryRepository.save(emailHistoryEntity);        }        ProfileEntity entity = new ProfileEntity();        entity.setName(registrationDTO.getName());        entity.setSurname(registrationDTO.getSurname());        entity.setEmail(registrationDTO.getEmail());        entity.setPassword(MD5Util.encode(registrationDTO.getPassword()));        entity.setRole(ProfileEntity.Role.ROLE_USER);        entity.setStatus(ProfileEntity.Status.REGISTRATION);        entity.setPhone(registrationDTO.getPhone());        profileRepository.save(entity);        return new ApiResponse(true, "SUCCESS CREATED!");    }    public ApiResponse registrationByEmail(RegistrationDTO registrationDTO) {        Optional<ProfileEntity> optionalProfile = profileRepository.findByEmail(registrationDTO.getEmail());        if (optionalProfile.isPresent()) {            if (optionalProfile.get().getStatus().equals(ProfileEntity.Status.REGISTRATION)) {                profileRepository.delete(optionalProfile.get()); // delete            } else {                return new ApiResponse(false, "Email already exists.");            }        }        Long count = emailHistoryRepository.countAllByEmailAndCreatedDateAfter(registrationDTO.getEmail(), LocalDateTime.now().minusMinutes(1));        if (count > 4) {            return new ApiResponse(false, "TRY AGAIN LATER AROUND 1 MINUT!!");        }        {            EmailHistoryEntity emailHistoryEntity = new EmailHistoryEntity();            emailHistoryEntity.setMessage(registrationDTO.toString());            emailHistoryEntity.setEmail(registrationDTO.getEmail());            emailHistoryRepository.save(emailHistoryEntity);        }        ProfileEntity entity = new ProfileEntity();        entity.setName(registrationDTO.getName());        entity.setSurname(registrationDTO.getSurname());        entity.setEmail(registrationDTO.getEmail());        entity.setPassword(MD5Util.encode(registrationDTO.getPassword()));        entity.setRole(ProfileEntity.Role.ROLE_USER);        entity.setStatus(ProfileEntity.Status.REGISTRATION);        entity.setPhone(registrationDTO.getPhone());        profileRepository.save(entity);        return mailSanderService.sendEmailVerification(registrationDTO.getEmail(), entity.getPhone());    }    public ApiResponse registrationBySms(RegistrationDTO registrationDTO) {        Optional<ProfileEntity> optionalProfile = profileRepository.findByPhone(registrationDTO.getPhone());        if (optionalProfile.isPresent()) {            if (optionalProfile.get().getStatus().equals(ProfileEntity.Status.REGISTRATION)) {                profileRepository.delete(optionalProfile.get()); // delete            } else {                return new ApiResponse(false, "Email already exists.");            }        }        Long count = smsHistoryRepository                .countAllByPhoneAndAndCreatedDateAfterAndStatus(registrationDTO.getPhone(), LocalDateTime.now().minusMinutes(1), SmsHistoryEntity.Status.NEW);        if (count > 4) {            return new ApiResponse(false, "TRY AGAIN LATER AROUND 1 MINUT!!");        }        ProfileEntity entity = new ProfileEntity();        entity.setName(registrationDTO.getName());        entity.setSurname(registrationDTO.getSurname());        entity.setEmail(registrationDTO.getEmail());        entity.setPassword(MD5Util.encode(registrationDTO.getPassword()));        entity.setRole(ProfileEntity.Role.ROLE_USER);        entity.setStatus(ProfileEntity.Status.REGISTRATION);        entity.setPhone(registrationDTO.getPhone());        profileRepository.save(entity);        EmailHistoryEntity emailHistoryEntity = new EmailHistoryEntity();        emailHistoryEntity.setMessage(registrationDTO.toString());        emailHistoryEntity.setEmail(registrationDTO.getEmail());        emailHistoryRepository.save(emailHistoryEntity);        return smsSenderService.sendRegistrationSms(entity.getPhone());    }}