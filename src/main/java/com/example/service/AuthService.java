package com.example.service;import com.example.dto.ApiResponse;import com.example.dto.AuthDTO;import com.example.dto.ProfileDTO;import com.example.entity.ProfileEntity;import com.example.repository.ProfileRepository;import com.example.util.JWTUtil;import com.example.util.MD5Util;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.imageio.ImageIO;import java.awt.image.BufferedImage;import java.io.ByteArrayOutputStream;import java.io.File;import java.util.Optional;@Servicepublic class AuthService {    @Autowired    ProfileRepository profileRepository;    public ApiResponse login(AuthDTO authDTO) {        Optional<ProfileEntity> optionalProfile = profileRepository                .findByPhone(authDTO.getPhone());        if (optionalProfile.isEmpty()) {            return new ApiResponse(false, "login or phone not found!");        }        ProfileEntity profileEntity = optionalProfile.get();        if (!profileEntity.getPassword().equals(MD5Util.encode(authDTO.getPassword()))) {            return new ApiResponse(false, "login or phone not found!");        }        if (profileEntity.getStatus().equals(ProfileEntity.Status.INACTIVE)) {            return new ApiResponse(false, "your status inactive!");        }        ProfileDTO response = new ProfileDTO();        response.setName(profileEntity.getName());        response.setSurname(profileEntity.getSurname());        response.setId(profileEntity.getId());        response.setRole(profileEntity.getRole());        response.setPhone(profileEntity.getPhone());        response.setJwt(JWTUtil.encode(profileEntity.getId(), profileEntity.getRole()));        return new ApiResponse(true, response);    }    public byte[] loadImage(String fileName) {        try {            BufferedImage originalImage = ImageIO.read(new File("attaches/" + fileName));            ByteArrayOutputStream baos = new ByteArrayOutputStream();            ImageIO.write(originalImage, "png", baos);            baos.flush();            byte[] imageInByte = baos.toByteArray();            baos.close();            return imageInByte;        } catch (Exception e) {            return new byte[0];        }    }}